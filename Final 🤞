CREATE OR REPLACE PROCEDURE get_customer_orders(IN cust_id INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT 
        o.order_id,
        o.order_date,
        p.name AS product_name,
        oi.quantity,
        p.price,
        (oi.quantity * p.price) AS total_price
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    WHERE o.customer_id = cust_id
    ORDER BY o.order_date DESC;
END;
$$;


import pytest
import psycopg2

# Update these with your actual database credentials
DB_CONFIG = {
    "dbname": "your_db_name",
    "user": "your_username",
    "password": "your_password",
    "host": "localhost",
    "port": "5432"
}

@pytest.fixture(scope="module")
def db_connection():
    conn = psycopg2.connect(**DB_CONFIG)
    yield conn
    conn.close()

# TC001: Create a new customer
def test_create_customer(db_connection):
    cur = db_connection.cursor()
    cur.execute("""
        INSERT INTO customers (name, email, city, country)
        VALUES (%s, %s, %s, %s)
        RETURNING customer_id
    """, ('Test User', 'testuser@example.com', 'Test City', 'Testland'))
    customer_id = cur.fetchone()[0]
    db_connection.commit()

    cur.execute("SELECT * FROM customers WHERE customer_id = %s", (customer_id,))
    result = cur.fetchone()
    assert result is not None

# TC002: Read all customers
def test_read_customers(db_connection):
    cur = db_connection.cursor()
    cur.execute("SELECT * FROM customers")
    customers = cur.fetchall()
    assert len(customers) > 0

# TC003: Update a customerâ€™s email
def test_update_customer_email(db_connection):
    cur = db_connection.cursor()
    cur.execute("""
        UPDATE customers SET email = %s WHERE name = %s
    """, ('updated@example.com', 'Test User'))
    db_connection.commit()

    cur.execute("SELECT * FROM customers WHERE email = %s", ('updated@example.com',))
    result = cur.fetchone()
    assert result is not None

# TC004: Delete a customer
def test_delete_customer(db_connection):
    cur = db_connection.cursor()
    cur.execute("DELETE FROM customers WHERE email = %s", ('updated@example.com',))
    db_connection.commit()

    cur.execute("SELECT * FROM customers WHERE email = %s", ('updated@example.com',))
    result = cur.fetchone()
    assert result is None

# TC005: Create order and order items
def test_create_order_and_items(db_connection):
    cur = db_connection.cursor()
    
    # Replace with actual customer_id and product_id present in your sample data
    customer_id = 2
    product_id = 1

    cur.execute("""
        INSERT INTO orders (customer_id, order_date)
        VALUES (%s, CURRENT_DATE)
        RETURNING order_id
    """, (customer_id,))
    order_id = cur.fetchone()[0]

    cur.execute("""
        INSERT INTO order_items (order_id, product_id, quantity)
        VALUES (%s, %s, %s)
    """, (order_id, product_id, 3))
    db_connection.commit()

    cur.execute("SELECT * FROM order_items WHERE order_id = %s", (order_id,))
    result = cur.fetchall()
    assert len(result) > 0

# TC006: Get customer's order history using the stored function
def test_get_customer_order_history(db_connection):
    cur = db_connection.cursor()
    cur.execute("SELECT * FROM get_customer_orders(%s)", (2,))
    result = cur.fetchall()
    assert result is not None and len(result) > 0
